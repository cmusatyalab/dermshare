From: <Saved by Windows Internet Explorer 7>
Subject: Code for the Earth Movers Distance (EMD)
Date: Tue, 16 Oct 2007 01:36:24 -0400
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://ai.stanford.edu/~rubner/emd/default.htm
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3198

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Code for the Earth Movers Distance (EMD)</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; charset=3Dutf-8">
<META content=3D"MSHTML 6.00.6000.16544" name=3DGENERATOR></HEAD>
<BODY style=3D"FONT-FAMILY: Arial, sans-serif" text=3D#000000 =
bgColor=3D#fdf5e6>
<TABLE cellSpacing=3D0 cellPadding=3D2 width=3D700>
  <TBODY>
  <TR>
    <TD bgColor=3D#1063fe>
      <P align=3Dcenter><BIG><BIG><BIG><FONT color=3D#ffffff>Code for =
the Earth=20
      Movers Distance (EMD) </FONT></BIG></BIG></BIG></P></TD></TR>
  <TR>
    <TD>&nbsp;
      <P>&nbsp;</P></TD></TR>
  <TR>
    <TD bgColor=3D#1063fe><FONT color=3D#ffffff =
size=3D5>Introduction</FONT></TD></TR>
  <TR>
    <TD>This is an implementation of the Earth Movers Distance, as =
described=20
      in <A =
href=3D"http://ai.stanford.edu/~rubner/emd/default.htm#ICCV">[1]</A>.=20
      The EMD computes the distance between two distributions, which are =

      represented by signatures. The signatures are sets of weighted =
features=20
      that capture the distributions. The features can be of any type =
and in any=20
      number of dimensions, and are defined by the user.=20
      <P>The EMD is defined as the minimum amount of work needed to =
change one=20
      signature into the other. The notion of "work" is based on the=20
      user-defined ground distance which is the distance between two =
features.=20
      The size of the two signatures can be different. Also, the sum of =
weights=20
      of one signature can be different than the sum of weights of the =
other=20
      (partial match). Because of this, the EMD is normalized by the =
smaller=20
      sum. </P>
      <P>The code is implemented in C, and is based on the solution for =
the=20
      Transportation problem as described in <A=20
      =
href=3D"http://ai.stanford.edu/~rubner/emd/default.htm#LIEBERMAN">[2]</A>=
=20
      </P>
      <P>Please let <A href=3D"mailto:rubner@cs.stanford.edu">me</A> =
know of any=20
      bugs you find, or any questions, comments, suggestions, and =
criticisms you=20
      have. If you find this code useful for your work, I would like =
very much=20
      to hear from you. Once you do, I'll inform you of any =
improvements, etc.=20
      Also, an acknowledgment in any publication describing work that =
uses this=20
      code would be greatly appreciated. </P>
      <P>&nbsp;</P></TD></TR>
  <TR>
    <TD bgColor=3D#1063fe><FONT color=3D#ffffff =
size=3D5>Usage</FONT></TD></TR>
  <TR>
    <TD>To use the code, perform the following steps:=20
      <OL>
        <LI>download the files <A=20
        =
href=3D"http://ai.stanford.edu/~rubner/emd/emd.h"><CODE>emd.h</CODE></A> =

        and <A=20
        =
href=3D"http://ai.stanford.edu/~rubner/emd/emd.c"><CODE>emd.c</CODE></A> =

        (check the <A=20
        href=3D"http://ai.stanford.edu/~rubner/emd/default.htm#LOG">log =
of=20
        changes</A> for latest changes).=20
        <LI>In <CODE>emd.h</CODE>, modify the line <PRE><FONT =
face=3DCourier>typedef int feature_t;</FONT>
</PRE>
        <P>to reflect your feature data type. Structures may be used =
too, for=20
        example </P><PRE><FONT face=3DCourier>typedef struct {
   int X,Y,Z;
} feature_t;
</FONT></PRE>
        <LI>To compute an EMD, call: <PRE><FONT face=3DCourier>float =
emd(signature_t *Signature1, signature_t *Signature2,
	  float (*func)(feature_t *, feature_t *),
	  flow_t *Flow, int *FlowSize);
</FONT></PRE>
        <P>where=20
        <DL>
          <DT><CODE>Signature1, Signature2</CODE>:=20
          <DD>Pointers to the two signatures that their distance we want =
to=20
          compute.=20
          <DT><CODE>Dist</CODE>:=20
          <DD>Pointer to the ground distance function. i.e. the function =
that=20
          computes the distance between two features.=20
          <DT><CODE>Flow</CODE>:=20
          <DD>(Optional) Pointer to a vector of flow_t (defined in =
emd.h) where=20
          the resulting flow will be stored. Flow must have n1+n2-1 =
elements,=20
          where n1 and n2 are the sizes of the two signatures =
respectively. If=20
          <CODE>NULL</CODE>, the flow is not returned.=20
          <DT><CODE>FlowSize</CODE>:=20
          <DD>(Optional) In case <CODE>Flow</CODE> is not =
<CODE>NULL</CODE>,=20
          <CODE>FlowSize</CODE> should point to a integer where the =
number of=20
          flow elements (always less or equal to n1+n2-1) will be =
written.=20
        </DD></DL>
        <LI>Compile <CODE>emd.c</CODE> and link it to your code. =
</LI></OL>
      <P>The signature data type <CODE>signature_t</CODE> is defined in=20
      <CODE>emd.h</CODE> as: </P><PRE><FONT face=3DCourier>typedef =
struct
{
  int n;                /* Number of features in the distribution */
  feature_t *Features;  /* Pointer to the features vector */
  float *Weights;       /* Pointer to the weights of the features */
} signature_t;
</FONT></PRE>
      <P>The feature data type <CODE>feature_t</CODE> is defined in=20
      <CODE>emd.h</CODE> and should be modified by the user to reflect =
his=20
      feature type. </P>
      <P>In special cases, the user might want to change some of the =
values in=20
      the definitions in <CODE>emd.h</CODE>:=20
      <DL>
        <DT><FONT face=3DCourier><CODE>#define MAX_SIG_SIZE 100</CODE> =
</FONT>
        <DD>The maximum allowed number of features in a signature=20
        <DT><FONT face=3DCourier><CODE>#define MAX_ITERATIONS 100</CODE> =
</FONT>
        <DD>Maximum number of iterations. For ordinary problems, 100 =
should be=20
        more than enough.=20
        <DT><FONT face=3DCourier><CODE>#define INFINITY 1e20</CODE> =
</FONT>
        <DD><FONT face=3DCourier><CODE>INFINITY</CODE></FONT> should be =
much=20
        larger than any other value in the problem=20
        <DT><FONT face=3DCourier><CODE>#define EPSILON =
1e-6</CODE></FONT>=20
        <DD><FONT face=3DCourier><CODE>EPSILON</CODE></FONT> determines =
the=20
        accuracy of the solution.=20
        <DT> </DT></DL></TD></TR>
  <TR>
    <TD bgColor=3D#1063fe><FONT color=3D#ffffff =
size=3D5>Examples</FONT></TD></TR>
  <TR>
    <TD>
      <OL>
        <LI><A=20
        =
href=3D"http://ai.stanford.edu/~rubner/emd/example1.c"><CODE>example1.c</=
CODE></A><BR>In=20
        this example the features are in three-dimensional space, and =
the ground=20
        distance is the Euclidean distance.<BR>To try this example, you =
need to=20
        modify <CODE>feature_t</CODE> in <CODE>emd.h</CODE> to be =
<BR><BR><FONT=20
        face=3DCourier>typedef struct { int X,Y,Z; } =
feature_t;</FONT><BR>
        <LI><A=20
        =
href=3D"http://ai.stanford.edu/~rubner/emd/example2.c"><CODE>example2.c</=
CODE></A><BR>Here,=20
        instead of providing a function to compute the ground distances, =
they=20
        are given in a predefined matrix. This is done by defining=20
        <CODE>feature_t</CODE> as <CODE>int</CODE> (the default), and =
setting=20
        the features in each signature to have consecutive numbers. The =
ground=20
        distance function uses these numbers as indexes to the =
predefined cost=20
        matrix.<BR>The resulting flow is returned from the =
<CODE>emd</CODE>=20
        function by passing as the last parameters a vector of=20
        <CODE>flow_t</CODE>, and a pointer to <CODE>int</CODE> where the =
actual=20
        number of flow elements will be written.<BR>Also, in this =
example the=20
        total weights of the two signatures are different. The first =
signature=20
        has a total weight of 1 while the second signature has a total =
weight of=20
        0.9. </LI></OL>
      <P>&nbsp;</P></TD></TR>
  <TR>
    <TD bgColor=3D#1063fe><FONT color=3D#ffffff size=3D5>Log of =
changes</FONT></TD></TR>
  <TR>
    <TD>
      <TABLE border=3D1>
        <TBODY>
        <TR>
          <TH>Date</TH>
          <TH>Decription</TH></TR>
        <TR>
          <TD>05/10/98</TD>
          <TD>Changed from absolute error check to relative error check =
+=20
            Fixed a bug that caused the "Unexpected error in =
findBasicVariables"=20
            error message (thanks Mark Ruzon) </TD></TR>
        <TR>
          <TD>03/04/98</TD>
          <TD>Fixed a bug that sometime caused a crash when the second=20
            signature had only one feature (thanks Mark Ruzon) =
</TD></TR>
        <TR>
          <TD>03/31/98</TD>
          <TD>Fixed a bug in the case where *both* signatures have only =
one=20
            feature (thanks Rajesh Batra) </TD></TR></TBODY></TABLE>
      <P><BR><A name=3DLOG></A></P></TD></TR>
  <TR>
    <TD bgColor=3D#1063fe><FONT color=3D#ffffff =
size=3D5>References</FONT></TD></TR>
  <TR>
    <TD></A><A name=3DICCV>[1] </A><A =
href=3D"http://ai.stanford.edu/yossi/">Y.=20
      Rubner</A>, <A=20
      href=3D"http://robotics.stanford.edu/users/tomasi/bio.html">C. =
Tomasi</A>,=20
      and <A href=3D"http://www-graphics.stanford.edu/~guibas">L. J. =
Guibas</A>.=20
      <B><A=20
      =
href=3D"http://vision.stanford.edu/public/publication/rubner/rubnerIccv98=
.ps.gz">A=20
      Metric for Distributions with Applications to Image =
Databases.</A></B>=20
      <I>Proceedings of the 1998 IEEE International Conference on =
Computer=20
      Vision, Bombay, India</I>, January 1998, pp. 59-66.<BR><BR><A=20
      name=3DLIEBERMAN>[2] F. S. Hillier and G. J. Lieberman. =
<B>Introduction to=20
      Mathematical Programming</B> <I>McGraw-Hill</I>, 1990.=20
</A></TD></TR></TBODY></TABLE>
<P></A></P></BODY></HTML>
